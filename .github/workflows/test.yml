# This workflow will install Python dependencies,
# run tests and lint with a variety of Python versions
# For more information see:
# https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Build

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v3
        with:
          python-version: 3.x
      - name: Build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
            python -m pip install --upgrade build
            python -m build --outdir dist/
      - name: Upload Package
        uses: actions/upload-artifact@v4
        with:
          name: package-files
          path: dist/
  test:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      isNewTag: ${{ steps.versionCheck.outputs.isNewTag }}
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v3
      with:
        python-version: 3.x
    - name: Download
      uses: actions/download-artifact@v4
      with:
        name: package-files
        path: dist/
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 coverage
        python -m pip install dist/django_migrant*.whl
    - name: Lint
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test
      env:
        GH_TOKEN: ${{ secrets.GIST_TOKEN }}
      run: |
        coverage run -m --omit="tests/*" unittest discover
        coverage report --show-missing
        # Generate json data to be placed in gist.
        coverage json -o django-migrant_coverage.json

        # Update the public gist so that the README.md refects results.
        # NB this gist has to already exist!
        gist_id=$(gh gist list --public | sed -nE "s/^(\w+)\s+django-migrant_coverage.json.*/\1/p")
        if [[ gist_id ]]; 
        then
          gh gist edit $gist_id --remove django-migrant_coverage.json
          gh gist edit $gist_id --add django-migrant_coverage.json
        else
          gh gist create --public --desc django-migrant_coverage.json django-migrant_coverage.json
        fi
    - name: Check If Version Is New
      id: versionCheck
      run: |
        VERSION=v$(sed -nr "s/^version.*=.*\"([[:digit:]]+.[[:digit:]]+.[[:digit:]]+)\"/\1/p" pyproject.toml)
        git fetch --tags
        exists=$(git tag --list $VERSION)
        if [[ $exists ]]; 
        then echo "isNewTag=false" >>$GITHUB_OUTPUT
        else echo "isNewTag=true" >>$GITHUB_OUTPUT
        fi
  test-others:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Download
        uses: actions/download-artifact@v4
        with:
          name: package-files
          path: dist/
      - name: Install
        run: |
            python -m pip install dist/django_migrant*.whl
      - name: Test
        run: |
          python -m unittest discover
  publish-to-testpypi:
    needs: [test, test-others]
    if: needs.test.outputs.isNewTag == 'true'
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/django-migrant
    permissions:
      id-token: write
    steps:
      - name: Download Package
        uses: actions/download-artifact@v4
        with:
          name: package-files
          path: dist/
      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
  publish-to-pypi:
    needs: publish-to-testpypi
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/django-migrant
    permissions:
      id-token: write
    steps:
      - name: Download Package
        uses: actions/download-artifact@v4
        with:
          name: package-files
          path: dist/
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
  tag:
    needs: publish-to-pypi
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Tag
      run: |
        VERSION=v$(sed -nr "s/^version.*=.*\"([[:digit:]]+.[[:digit:]]+.[[:digit:]]+)\"/\1/p" pyproject.toml)
        git tag $VERSION
        git push --tags
